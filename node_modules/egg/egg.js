(function () {
    'use strict';

    var baseApp = baseApp || {};

    var _Response = function (egg, req, res) {
        this.egg = egg;
        this.res = res;
        this.req = req;
        this.content = "text/plain";
        this.type = "text";
        this.source = "";
        this.status = 200;
    };

    _Response.prototype.write = function () {

        switch (this.type) {
            case 'text':
                this.text();
                break;

            case 'html':
                this.html();
                break;

            case 'json':
                this.json();
                break;

            default :
                this.custom();
                break;

        }

    }

    _Response.prototype.custom = function () {
        this.res.writeHead(this.status, {"Content-Type": this.content});
        this.res.write(this.source);
        this.res.end();
    }

    _Response.prototype.json = function () {
        this.res.writeHead(this.status, {"Content-Type": "application/json"});
        this.res.write(this.source);
        this.res.end();
    }

    _Response.prototype.text = function () {
        this.res.writeHead(this.status, {"Content-Type": "text/plain"});
        this.res.write(this.source);
        this.res.end();
    }

    _Response.prototype.html = function () {
        this.res.writeHead(this.status, {"Content-Type": "text/html"});
        this.res.write(this.source);
        this.res.end();
    }

    var _route = function (method, url, action) {
        this.method = method;
        this.url = url;
        this.action = action;
        this._after = false;
        this._before = false;
        this._queryString = {};
        this.missing = false;
        this._error = false;
        this._response = null;
        this._request = null;
    };

    _route.prototype.getAction = function () {
        return this.action;
    };

    _route.prototype.getMethod = function () {
        return this.method;
    };

    _route.prototype.getURL = function () {
        return this.url;
    };

    _route.prototype.getAfter = function (after) {
        return this._after;

    };

    _route.prototype.getBefore = function (before) {
        return this._before;
    };

    _route.prototype.after = function (after) {
        this._after = after;
        return this;

    };

    _route.prototype.before = function (before) {
        this._before = before;
        return this;
    };


    var _egg = function (config) {

        var config = config || {};

        this.defaultConfig = {};

        this.config = this.merge(this.defaultConfig, config);

        this._routes = {GET: [], POST: [], ANY: []};
        this.response = null;
        this.request = null;
        this.missing = false;
        this.error = false;

    };

    _egg.prototype.render = function (i, type) {

        var r = new _Response(this, this._request, this._response);

        var type = type || 'html';

        var fs = require('fs');
        fs.readFile('views/' + i + ".egg", function (err, html) {
            if (err) {
                console.log(err);
            }


            r.type = "html";
            r.source = html;
            r.write();

        });

    };

    _egg.prototype.app = function () {
        return this;
    };

    _egg.prototype.get = function (url, action) {
        return this.addRoute('GET', url, action);
    };


    _egg.prototype.addRoute = function (method, url, action) {


        var route = new _route(method, url, action);
        this._routes[method].push(route);
        return route;


    };

    _egg.prototype.dispatch = function (request, response) {


        var instance = this;

        if (typeof instance.before === "function") {
            instance.before(request, response);
        }

        var u = request.url;
        var m = request.method;
        instance._request = request;
        instance._response = response;

        var query_string = "";

        if (u.indexOf("?") >= 1) {
            query_string = u.split("?").pop();
            u = u.substr(0, u.indexOf("?"));


            var query_bundles = query_string.split("&");
            if (query_bundles.length > 0) {
                for (var index in query_bundles) {
                    var bundle = query_bundles[index];
                    var single_object = bundle.split("=");

                    if (single_object.length == 2) {
                        this._queryString[single_object[0]] = single_object[1];
                    } else if (single_object.length == 1) {
                        this._queryString[single_object[0]] = "";
                    }
                }
            }

        }

        var routeMatched = false;

        for (var i in this._routes[m]) {
            var croute = this._routes[m][i];

            var route_pattren = croute.getURL();

            var replace_required_params = route_pattren.replace(/:[^\s/]+/g, '([\\w-]+)');
            var final_pattren = replace_required_params.replace(/\?[^\s/]+/g, '?(.*)');

            var regExpObject = new RegExp(final_pattren);

            var matchedResults = u.match(regExpObject);

            if (matchedResults !== null && matchedResults.length > 0) {
                var final_url = matchedResults[0];

                if (matchedResults.length > 1) {
                    var parameters = matchedResults.slice(1);

                }

                if (final_url == u) {
                    var rafter = croute.getAfter();
                    var rbefore = croute.getBefore();
                    var action = croute.getAction();

                    if (typeof action === "function") {

                        if (typeof rbefore === "function") {
                            rbefore(request, response);
                        }

                        action(this, request, response);

                        if (typeof rafter === "function") {
                            rafter(request, response);
                        }


                    } else {

                    }

                    console.log("HTTP/1.1 200 OK");
                    routeMatched = true;
                    break;
                }

            }

        }

        if (routeMatched == false) {
            console.log("HTTP/1.1 404 Not Found");

            if (typeof instance.missing === "function") {
                instance.missing(request, response);
            } else {
                response.end();
            }
        }

        if (typeof instance.after === "function") {
            instance.after(request, response);
        }


    };

    _egg.prototype.merge = function (obj1, obj2) {


        for (var p in obj2) {
            try {
                // Property in destination object set; update its value.
                if (obj2[p].constructor == Object) {
                    obj1[p] = this.merge(obj1[p], obj2[p]);

                } else {
                    obj1[p] = obj2[p];

                }

            } catch (e) {
                // Property in destination object not set; create it and set its value.
                obj1[p] = obj2[p];

            }
        }

        return obj1;

    };


    exports.create = function (config) {
        baseApp = new _egg(config);

        return function (request, response) {
            baseApp.dispatch(request, response)
        };

    };

    exports.app = function () {
        return baseApp;
    };

}).call(this);